#include<bits/stdc++.h>
using namespace std;
int maxProfit(int arr[], int totalLen){
	if(totalLen == 0)
	 return 0;
	int best = 0;
	for(int len =1; len <= totalLen; len++){
		int netProfit = arr[len] + maxProfit(arr,totalLen - len);
		best = max(best,netProfit);
	}
	return best;
}
int memo[100];
int maxProfitM(int arr[], int totalLen){
	if(totalLen == 0)
	 return 0;
	if(memo[totalLen] != -1){
		return memo[totalLen];
	}
	int best = 0;
	for(int len =1; len <= totalLen; len++){
		int netProfit = arr[len] + maxProfit(arr,totalLen - len);
		best = max(best,netProfit);
	}
	memo[totalLen] = best;
	return best;
}

int maxProfitDP(int arr[],int totalLen){
	int dp[100]={};
	for(int len = 1;len <= totalLen; len++){
		int best = 0;
		for(int cut =1;cut<=len;cut++)
		{
			best = max(best,arr[cut] + dp[len -cut]);
		}
		dp[len] = best;
	}
	return dp[totalLen];
}
int main()
{
	int price[100];  //Price of each length
	int totalLen;
	cin>>totalLen;
	for(int i=1;i<=totalLen;i++)
	 cin>>price[i];   
	for(int i=0; i<=totalLen;i++)
	  memo[i] =-1;
	int ans = maxProfit(price,totalLen);
	cout<<ans<<" Using recursion"<<endl;
	int ans2=maxProfitM(price,totalLen);
	cout<<ans2<<" using Memoization"<<endl;
	int ans3 = maxProfit(price,totalLen);
	 	cout<<ans3<<" using DP"<<endl;
}
